<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dendoink.github.io/daydream/blog</id>
    <title>白日做梦 Blog</title>
    <updated>2023-04-19T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dendoink.github.io/daydream/blog"/>
    <subtitle>白日做梦 Blog</subtitle>
    <icon>https://dendoink.github.io/daydream/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Github 开始整花活了]]></title>
        <id>https://dendoink.github.io/daydream/blog/2023/04/19/index</id>
        <link href="https://dendoink.github.io/daydream/blog/2023/04/19/index"/>
        <updated>2023-04-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Extend your codebase with custom, interactive blocks.Build rich documentation, enhance your workflows, and bring your repository to life.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://blocks.githubnext.com/" target="_blank" rel="noopener noreferrer">官方展示链接</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新特性介绍">新特性介绍<a href="#新特性介绍" class="hash-link" aria-label="新特性介绍的直接链接" title="新特性介绍的直接链接">​</a></h2><ul><li>Github 仓库的 README.md 文件没有办法像现在很多静态网站框架直接 embed 一个demo 进来，所以就只能用 截图来展示效果，所以针对这个痛点，github 将会支持直接在 README.md 中直接插入 demo 方便大家更清楚直观的了解对应内容。</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme1-e99e748f84c7161dfcbf0758e954414a.png" width="1722" height="595" class="img_ev3q"></p><ul><li>直接展示有关项目健康状况的实时统计数据</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme2-e271ef00ff52a1c19099087c60b8c9b5.png" width="1691" height="611" class="img_ev3q"></p><ul><li>文档内容太多只能靠 <code>command + f</code> 搜索？新版 github 拥有可搜索的参考文档了!</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme3-63bb4b060d5ac37533b6dd3713439d98.png" width="1679" height="619" class="img_ev3q"></p><ul><li>根据项目的文件结构生成目录，<code>Octotree</code> 可以退役啦</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme4-89055091e7be4f68bf55228461d8767a.png" width="1707" height="657" class="img_ev3q"></p><ul><li>有些文件的原始形式都易于理解，例如 CSV 或 JSON 数据，所以新版本不仅可以用易读的形式来查看数据，并且重点是可以<strong>与之交互</strong>! </li></ul><p><img loading="lazy" src="/daydream/assets/images/readme5-de09717a020b03bb8c5d193844d1af93.png" width="1740" height="606" class="img_ev3q"></p><p>当然你也可以选择以图表的形式来查看这些内容:
<img loading="lazy" src="/daydream/assets/images/readme5.1-4814dad1208876762e31afae56fb6eb8.png" width="1323" height="479" class="img_ev3q"></p><ul><li>当然也有了可以插入到文档中的可编辑图表</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme6-e3dc53f4fc935b84c7826f81543c8dc6.png" width="1307" height="514" class="img_ev3q"></p><ul><li>还可以为你的工作流量身定制用户界面</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme7-c6c9cca55f6a41dfff20fe2407759ca9.png" width="1302" height="529" class="img_ev3q"></p><ul><li>可以更好的看到社区成员的状态</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme8-48d0c3b847bb3530d59621e036af9420.png" width="1348" height="624" class="img_ev3q"></p><ul><li>一目了然地了解你的代码结构</li></ul><p><img loading="lazy" src="/daydream/assets/images/readme9-6015c471d847f3c6ea372120f14e4685.png" width="1304" height="592" class="img_ev3q"></p>]]></content>
        <author>
            <name>dendoink</name>
            <uri>https://github.com/dendoink</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Inside fiber in depth]]></title>
        <id>https://dendoink.github.io/daydream/blog/2021/09/01/index</id>
        <link href="https://dendoink.github.io/daydream/blog/2021/09/01/index"/>
        <updated>2021-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[overview of the new reconciliation algorithm in react]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber01.png" alt="Inside Fiber: in-depth overview of the new reconciliation algorithm in React" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="声明">声明<a href="#声明" class="hash-link" aria-label="声明的直接链接" title="声明的直接链接">​</a></h2><ul><li><a href="https://indepth.dev/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react/" target="_blank" rel="noopener noreferrer">原文</a></li></ul><p>作 React学习指北中，幸得此文，受益匪浅。</p><p>虽已有中译版，然细读之，察屡有误，故与作者通后更译，此新译之文，与诸君享。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="正文">正文<a href="#正文" class="hash-link" aria-label="正文的直接链接" title="正文的直接链接">​</a></h2><p>深入研究 React 称为 Fiber 的新架构，了解新 reconciliation 算法的两个主要阶段。</p><p>我们将详细介绍 React如何更新 state，props 和处理 children。</p><p>React 是一个用于构建用户交互界面的 JavaScript 库，其核心 <a href="https://indepth.dev/what-every-front-end-developer-should-know-about-change-detection-in-angular-and-react/" target="_blank" rel="noopener noreferrer">机制</a> 就是跟踪组件的状态变化，并将更新的状态映射到到新的界面。</p><p>这就是我们在 React 中熟知的 <code>协调</code> 。我们调用 <code>setState</code> ，而框架会检查 <code>state</code> 或 <code>props</code> 是否更新，以及是否在 UI 界面重新渲染组件。</p><p>React 文档提供了对该机制的<a href="https://reactjs.org/docs/reconciliation.html" target="_blank" rel="noopener noreferrer">高级概述</a> ：</p><p>“React元素，生命周期方法和 <code>render</code> 方法的作用以及对组件的children所应用的 <code>diffing</code> 算法。从 <code> </code>render<code> </code> 方法返回的不可变 React 元素树，通常称为<em>虚拟DOM</em>。</p><p>在早期，这个术语有助于帮助人们理解 React，但也引起了混乱，并且在React文档中不再使用。”</p><p>在本文中，我将坚持将其称为: React元素树。</p><p>除了 React 元素树之外，该框架还有一个内部实例树（组件，DOM节点等）用于保持状态。</p><p>从版本16开始，React 推出了该内部实例树的新实现，以及对其进行管理的算法，代号为 <strong>Fiber</strong>。要了解 <strong>Fiber</strong> 架构带来的优势，请查看 <a href="https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree/" target="_blank" rel="noopener noreferrer">React 为何以及如何在 Fiber 中使用链表</a>。</p><p>这是该系列的第一篇文章，目的是为了让你了解 React 的内部体系结构。</p><p>在本文中，我会提供与算法有关的重要概念和数据结构的深入概述。 当我们拥有足够的背景知识之后，将开始探索用于遍历和处理 <strong>fiber</strong> 树的算法和主要函数。 </p><p>该系列的下一篇文章将演示React如何使用该算法执行初始渲染和处理 state 和 props 的更新。 </p><p>从那里开始，我们将继续讨论 scheduler 的细节， child reconciliation 过程以及构建 effects list 机制的细节。</p><p>在这里我会提供一些非常 “高级” 的知识给你，我鼓励你阅读它，以了解Concurrent（并发） React 内部运作背后的魔法。 </p><p>如果有开始为 React 做贡献的打算，那么这一系列文章也会为你提供很好的指导。</p><p>我是一个 <a href="https://indepth.dev/level-up-your-reverse-engineering-skills/" target="_blank" rel="noopener noreferrer">逆向工程死忠粉</a>，因此在最新版本中将有很多链接到源 16.6.0。</p><p>肯定要花很多心思，所以如果你没有立刻领会某些内容，不要感到压力。 付出都是值得的。 </p><blockquote><p>请注意，你不需要了解任何使用 React 的内容。 本文是关于 React 的内部工作。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-the-background">Setting the background<a href="#setting-the-background" class="hash-link" aria-label="Setting the background的直接链接" title="Setting the background的直接链接">​</a></h2><p>我将在整个系列中使用这个简单的应用程序：有一个按钮，点击可以增加屏幕上呈现的数字：</p><p><img loading="lazy" src="https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber02.gif" alt="img" class="img_ev3q"></p><p>代码实现：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ClickCounter</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">React</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">props</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">super</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">props</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">state</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">count</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">handleClick</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">handleClick</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">handleClick</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">setState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token literal-property property" style="color:#36acaa">count</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">count</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">render</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            button key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            onClick </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">handleClick</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Update</span><span class="token plain"> counter </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            span key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">count</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">span</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以在<a href="https://stackblitz.com/edit/react-t4rdmh" target="_blank" rel="noopener noreferrer">这里</a>把玩这段代码，如你所见，这是一个简单组件，从 <code>render()</code> 方法中返回两个子元素 <code>button</code> 和 <code>span</code> 。</p><p>当你单击按钮时，组件的状态将被内部的 handler 更新，顺带的，这会导致 <code>span</code> 元素的文本更新。</p><p>React 在 <strong>协调（reconciliation）</strong> 期间执行各种活动。</p><p>例如，下面是 React 在简单组件的首次渲染中，以及 state 更新之后，执行的高级操作：</p><ul><li>更新 <code>ClickCounter</code> 组件中 <code>state</code> 的 <code>count</code> 属性。</li><li>检索并比较 <code>ClickCounter</code> 的子组件和 <code>props</code> 。</li><li>更新 <code>span</code> 的 <code>props</code> 。</li></ul><p><strong>协调（reconciliation）</strong> 期间也进行了其他活动，包括调用<a href="https://reactjs.org/docs/react-component.html#updating" target="_blank" rel="noopener noreferrer">生命周期方法</a>或更新 <a href="https://reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener noreferrer">refs</a>。<strong>这些活动在 Fiber 架构中被统称为 work。</strong> <code>work</code> 的 <code>type</code> 通常取决于 React 元素的类型。</p><p>例如，对一个类组件而言，React 需要创建一个实例，而函数组件则无需执行此操作。</p><p>React 的有许多类型的 elements，例如类组件和函数组件， <code>host</code> 组件（DOM节点）等。</p><p>React 元素的类型由传入到 <code>createElement</code> 的第一个参数决定，通常在 <code>render</code> 方法中使用此函数来创建元素。</p><p>在我们开始探索活动细节和主要的 <code>fiber</code> 算法之前，让我们先熟悉 React 内部使用的数据结构。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="从-react-元素到-fiber-节点">从 React 元素到 Fiber 节点<a href="#从-react-元素到-fiber-节点" class="hash-link" aria-label="从 React 元素到 Fiber 节点的直接链接" title="从 React 元素到 Fiber 节点的直接链接">​</a></h2><p>React 中的每个组件都有一个 <code>UI</code> 表示，我们可以称之为从 <code>render</code> 方法返回的一个视图或模板。</p><p>这是 <code>ClickCounter</code> 组件的模板：</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">button</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">key</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">1</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">onClick</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript keyword" style="color:#00009f">this</span><span class="token tag script language-javascript punctuation" style="color:#393A34">.</span><span class="token tag script language-javascript property-access" style="color:#00009f">onClick</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text">Update counter</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">button</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">span</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">key</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">2</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">count</span><span class="token punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">span</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="react-元素">React 元素<a href="#react-元素" class="hash-link" aria-label="React 元素的直接链接" title="React 元素的直接链接">​</a></h3><p>模板通过JSX编译器后，将得到一堆React元素。下面是真正从 React 组件的 render 方法返回的结果（并不是 HTML）。</p><p>由于我们不需要使用JSX，因此可以将 <code>ClickCounter</code> 组件的 <code>render</code> 方法重写：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ClickCounter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token method function property-access" style="color:#d73a49">render</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">createElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">'button'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token literal-property property" style="color:#36acaa">key</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'1'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token literal-property property" style="color:#36acaa">onClick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">onClick</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">'Update counter'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">createElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">'span'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token literal-property property" style="color:#36acaa">key</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'2'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">state</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">count</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>render</code> 方法调用的 <code>React.createElement</code> 会产生两个数据结构。</p><p>像这样：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $$</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Symbol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">react</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">element</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'button'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">key</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">props</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">children</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Update counter'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function-variable function" style="color:#d73a49">onClick</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $$</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Symbol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">react</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">element</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'span'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">key</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">props</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token literal-property property" style="color:#36acaa">children</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 React 将属性 <code>$$typeof</code> 添加到这些对象中，作为 React 元素的唯一标识。</p><p>而且有 <code>type</code> 、 <code>key</code> 、和 <code>props</code> 这些属性对 React 元素进行描述。</p><p>它们的值来源于传递给 <code>react.createElement</code> 函数的参数。</p><p>请关注 React 是如何将文本内容表示为 <code>span</code> 和 <code>button</code> 的子节点的。</p><p>以及如何把 click 的 handler 描述为 button 里 <code>props</code> 的一部分。</p><p>React 元素还有其他的很多字段，比如 <code>ref</code> ，但是超出本文范围不作展开。</p><p><code>ClickCounter </code> 对应的 React 元素不存在任何 <code>props</code> 或 <code>key</code> ：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $$</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Symbol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">react</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">element</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">key</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">props</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">ref</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">ClickCounter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="fiber-nodes">Fiber nodes<a href="#fiber-nodes" class="hash-link" aria-label="Fiber nodes的直接链接" title="Fiber nodes的直接链接">​</a></h3><p>在<strong>协调（reconciliation）</strong> 过程中，从 <code>render</code> 方法返回的每个 React element 的数据将被合并到 <code>Fiber</code> 节点树中，每个 React element 都有一个对应的 <code>Fiber</code> 节点。</p><p>与 React 元素不同， <code>Fiber</code> 并不是每次渲染都会重新创建，它们是用来保存组件 state 和 <code>DOM</code> 的可变数据结构。</p><p>之前聊到过，框架执行的活动，取决于 React 元素的类型。</p><p>在我们的示例中，对于类组件 <code>ClickCounter</code> 而言，它调用生命周期方法和 <code>render</code> 方法。</p><p>而对于 <code>span</code> host 组件（dom节点），执行 DOM 更新。</p><p>因此，每个 React 元素都被转换成 <a href="https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js" target="_blank" rel="noopener noreferrer">相应类型</a>的 <code>Fiber</code> 节点，描述需要完成的工作。</p><p>[译者注：这里的类型是 WorkTag 每个类型是一个固定的数字，例如函数式组件对应的是 0 而类组件对应的是 1]</p><p><strong>你可以将 <code>Fiber</code> 想象成一种数据结构，用来表示一些要做的工作，或者换句话说，一个工作单元。 <code>Fiber</code> 的架构还提供了一种方便的方式来跟踪、调度、暂停和中止工作。</strong></p><p>当 React 元素第一次转换为 fiber 节点时，React在 <code>createFiberFromTypeAndProps</code> 函数中使用元素的数据来创建一个 <code>Fiber</code> 。</p><p>在后续更新中，React 复用了fiber节点，这意味着它只会根据数据发生改变的部分来更新对应的 fiber 节点中的属性。</p><p>如果从 <code>render</code> 方法不再返回相应的 React 元素，React 可能还需要根据 <code>key</code> 属性来移动或删除层级结构中的 fiber 节点。</p><blockquote><p>深入 <a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactChildFiber.js#L239" target="_blank" rel="noopener noreferrer">ChildReconciler</a> 函数，了解所有活动的列表以及 React 为现有 fiber 节点执行的相应函数。 </p></blockquote><p>因为 React 为每个 React 元素创建一个 fiber 节点，并且我们已经有一个这些元素组成的树，所以我们将会得到一个fiber 节点树。这样的情况下，我们简单的示例看起来就像这样：</p><p><img loading="lazy" src="https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber03.png" alt="img" class="img_ev3q"></p><p>所有 <code>fiber</code> 节点使用这些属性： <code>child</code> 、 <code>sibling</code> 和 <code>return</code> 通过链接列表的形式连接在一起。</p><p>如果你想知道更多关于为什么要这样的更多信息，可以阅读这篇文章 <a href="https://medium.com/dailyjs/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7" target="_blank" rel="noopener noreferrer">The how and why on React’s usage of linked list in Fiber</a> (如果你还没读过的话)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="current-树和-workinprogress-树">Current 树和 workInProgress 树<a href="#current-树和-workinprogress-树" class="hash-link" aria-label="Current 树和 workInProgress 树的直接链接" title="Current 树和 workInProgress 树的直接链接">​</a></h3><p>在第一次渲染之后，React 最终得到了一棵反映渲染出 UI 的应用程序 state 的 fiber 树。</p><p>这棵树通常被称为 <code>current</code> 树。当 React 开始处理更新时，它会构建一棵所谓的 <code>workInProgress</code> 树，反映将来要刷新到屏幕的 state。</p><p>所有的 work 都是在 <code>workInProgress</code> 树的 fibler 上进行的。当 React 遍历 <code>current</code> 树时，它为每个现有的光纤节点创建一个替代节点。</p><p>这些节点构成了 <code>workInProgress</code> 树。 它们用 render 方法返回的 React 元素的数据创建。 </p><p>一旦处理完所有 update 并完成所有相关 work，React 将一棵准备好的备用树刷新到屏幕。</p><p>一旦在屏幕上渲染 <code>workInProgress</code> 树，它就成为了 <code>current</code> 树。</p><p><strong>React 的核心原则之一 consistency （一致性）。</strong> </p><p>React总是一次性更新 <code>DOM</code> （它不会显示部分结果）。 <code>workInProgress</code> 树作为用户看不到的 “草稿”，以便 React 可以在处理所有组件之后，再将它们的更新刷新到屏幕上。</p><p>在源代码中，你会看到许多函数从 <code>current</code> 树和 <code>workInProgress</code> 树中获取 <code>fiber</code> 节点。下面是一个这样的函数的示例：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateHostComponent</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">current</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> workInProgress</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> renderExpirationTime</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>每个 fiber 节点都在 <strong>alternate</strong> 字段中保留了在另一棵树上其对应节点的引用。 <code>current</code> 树中的一个节点指向 <code>workInProgress</code> 树中的节点，反之亦然。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="side-effects-副作用">Side-effects 副作用<a href="#side-effects-副作用" class="hash-link" aria-label="Side-effects 副作用的直接链接" title="Side-effects 副作用的直接链接">​</a></h3><p>我们可以将 React 中的组件视为使用 state 和 props 来计算 UI如何呈现的函数。</p><p>除此之外的所有活动，例如，改变DOM 或调用生命周期方法，都应被视为 Side-effects ，或者简单地视为一种 effect。 </p><p>在 <a href="https://reactjs.org/docs/hooks-overview.html#%EF%B8%8F-effect-hook" target="_blank" rel="noopener noreferrer">文档</a>里也有提及。</p><blockquote><p>你之前可能已经在 React 组件中执行过获取数据、订阅或者 <strong>手动修改 DOM</strong>。我们统一把这些操作称为 “Side-effects”，或者简称为 “effect”。（因为它们会影响其他组件，并且在渲染期间无法完成。） ”</p></blockquote><p>你可以看到大多数 state 和 props 的更新将如何导致 side-effects 。 </p><p>而且，由于执行 effect 是一种 work，fiber 节点是一种跟踪更新效果的便捷机制。</p><p>每个fiber 节点都可以包含与其相关的 effect，在 <code>effectTag</code> 字段中。</p><p>因此，Fiber中的 effect 基本上定义了实例在处理更新后需要完成的 <a href="https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/shared/ReactSideEffectTags.js" target="_blank" rel="noopener noreferrer">work</a>：</p><ul><li>对于 host 组件（dom元素），包括添加、更新或删除元素。</li><li>对于类组件，React 可能需要更新 <code>refs</code> 并调用 <code>componentDidMount</code> 和 <code>componentDiddUpdate</code> 生命周期方法。</li><li>还有其他 effect 对应于其他类型的 fiber。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="effects-链表">Effects 链表<a href="#effects-链表" class="hash-link" aria-label="Effects 链表的直接链接" title="Effects 链表的直接链接">​</a></h3><p>React 执行 update 非常快，它采用了一些有趣的技术来达到这种性能水平：</p><p><strong>建立具有 effect 的 fiber 节点的线性链表以实现快速迭代是其中之一</strong>。</p><p>迭代线性链表比树快得多，不需要花时间在没有 side-effects 的节点上。</p><p>该链表的目的是，标记具有 DOM 更新或与其他 effect 关联的的节点。</p><p>它是 <code>finishedWork</code> 树的子集，并且使用 <code>nextEffect</code> 属性而不是 <code>current</code> 树和 <code>workInProgress</code> 树中的 <code>child</code> 属性进行链接。</p><p><a href="https://medium.com/u/a3a8af6addc1?source=post_page---------------------------" target="_blank" rel="noopener noreferrer">Dan Abramov</a> 提出了一个 effect 链表的类比，把它想象成一棵圣诞树，"圣诞灯"把所有有效的节点绑在一起。</p><p>为了将其可视化，让我们想象下面的 <code>fiber</code> 节点树：</p><p>其中，高亮的节点有一些 work 要做，例如，我们的更新导致 <code>c2</code> 插入到 DOM 中。</p><p><code>d2</code> 和 <code>c1</code> 更改属性， <code>B2 </code> 触发生命周期方法。</p><p>effect 链表将它们链接在一起，以便 React 可以稍后跳过其他节点：</p><p><img loading="lazy" src="https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber04.png" alt="img" class="img_ev3q">)</p><p>可以看到，具有 effect 的节点是如何链接在一起的。</p><p>当遍历节点时，React 使用 <code>firstEffect</code> 指针来确定列表的起始位置。所以上面的图表可以表示为这样的线性链表：</p><p><img loading="lazy" src="https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber05.png" alt="img" class="img_ev3q">)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="fiber-树的根节点">Fiber 树的根节点<a href="#fiber-树的根节点" class="hash-link" aria-label="Fiber 树的根节点的直接链接" title="Fiber 树的根节点的直接链接">​</a></h3><p>每个 React 应用程序都有一个或多个充当容器 DOM 元素。在我们的例子中它是 ID 为 <code>container</code> 的 <code>div</code> 。</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> domContainer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">querySelector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'#container'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token maybe-class-name">ReactDOM</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">render</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">React</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">createElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token maybe-class-name">ClickCounter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> domContainer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>React为每个容器创建一个 <a href="https://github.com/facebook/react/blob/0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74/packages/react-reconciler/src/ReactFiberRoot.js#L31" target="_blank" rel="noopener noreferrer">fiber root </a> 对象。你可以使用 DOM 元素的引用来访问它：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> fiberRoot </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">query</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'#container'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_reactRootContainer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_internalRoot</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个 fiber root 是 React 保存对 fiber 树的引用的地方。存储在 fiber root 的 <code>currrent</code> 属性中：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> hostRootFiberNode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fiberRoot</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">current</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Fiber 树以 <a href="https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/shared/ReactWorkTags.js#L34" target="_blank" rel="noopener noreferrer">特殊类型</a> 的 fiber 节点 <code>HostRoot</code> 开始。 </p><p>它是在内部创建的，并充当最顶层组件的父级。 </p><p><code>HostRoot</code> fiber 节点通过 <code>stateNode</code> 属性链接到 <code>FiberRoot</code> ：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">fiberRoot</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">stateNode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> fiberRoot</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>你可以通过 fiber root 访问最顶层的 <code>HostRoot</code> fiber 节点来探索 fiber tree。 </p><p>或者，你可以从组件实例中获取单个 fiber 节点，像这样：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">compInstance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">_reactInternalFiber</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="fiber-节点结构">Fiber 节点结构<a href="#fiber-节点结构" class="hash-link" aria-label="Fiber 节点结构的直接链接" title="Fiber 节点结构的直接链接">​</a></h3><p>来看看为 <code>ClickCounter</code> 组件创建的 fiber 节点的结构：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">stateNode</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ClickCounter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">ClickCounter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">alternate</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">key</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">updateQueue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">memoizedState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">count</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">pendingProps</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">memoizedProps</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">tag</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">effectTag</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">nextEffect</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以及 <code>span</code> DOM 元素：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">stateNode</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">HTMLSpanElement</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"span"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">alternate</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">key</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">updateQueue</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">memoizedState</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">pendingProps</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">children</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">memoizedProps</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">children</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">tag</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">effectTag</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">nextEffect</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>fiber 节点上有很多字段。在前面已经描述过字段 <code>alternate</code> 、 <code>effectTag</code> 和 <code>nextEfect</code> 的用途。现在看看其他的字段的用途。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="statenode">stateNode<a href="#statenode" class="hash-link" aria-label="stateNode的直接链接" title="stateNode的直接链接">​</a></h3><p>保存对类组件实例，DOM 节点或与 fiber 节点关联的其他 React 元素类型的引用。 一般来说，此属性用于保存与 fiber 关联的 local state。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="type">type<a href="#type" class="hash-link" aria-label="type的直接链接" title="type的直接链接">​</a></h3><p>定义与此 fiber 关联的函数或类。 对于类组件，它指向构造函数，对于 DOM 元素，它指定 HTML 标记。 </p><p>我把这个字段理解为 fiber 节点与哪些元素相关。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tag">tag<a href="#tag" class="hash-link" aria-label="tag的直接链接" title="tag的直接链接">​</a></h3><p>定义 <a href="https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/ReactWorkTags.js" target="_blank" rel="noopener noreferrer">fiber类型</a>，在 reconciliation 算法中使用它来确定需要完成的工作。</p><p>就像前面提到的，work 取决于 React 元素的类型。 <a href="https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/react-reconciler/src/ReactFiber.js#L414" target="_blank" rel="noopener noreferrer">createFiberFromTypeAndProps函数 </a>将 React 元素映射到相应的 fiber 节点类型。</p><p>在我们的应用中， <code>ClickCounter</code> 组件的 tag 属性是 1 ，它表示 <code>类组件</code> ；</p><p>而 <code>span</code> 元素的 tag 属性是 5 表示 <code>HostComponent(宿主组件)</code> 。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="updatequeue">updateQueue<a href="#updatequeue" class="hash-link" aria-label="updateQueue的直接链接" title="updateQueue的直接链接">​</a></h3><p>state 更新，回调以及 DOM 更新的队列。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="memoizedstate">memoizedState<a href="#memoizedstate" class="hash-link" aria-label="memoizedState的直接链接" title="memoizedState的直接链接">​</a></h3><p>用于创建输出的 fiber 的状态。 处理更新时，它反映了当前渲染在屏幕上的内容的 state。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="memoizedprops">memoizedProps<a href="#memoizedprops" class="hash-link" aria-label="memoizedProps的直接链接" title="memoizedProps的直接链接">​</a></h3><p>在上一次渲染期间用于创建输出的 fiber 的 props 。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pendingprops">pendingProps<a href="#pendingprops" class="hash-link" aria-label="pendingProps的直接链接" title="pendingProps的直接链接">​</a></h3><p>在 React element 的新数据中更新并且需要应用于子组件或 DOM 元素的 props。(子组件或者 DOM 中将要改变的 props)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="key">key<a href="#key" class="hash-link" aria-label="key的直接链接" title="key的直接链接">​</a></h3><p>唯一标识符，当具有一组 children 的时候，用来帮助 React 找出哪些项已更改，已添加或已从列表中删除。 与<a href="https://reactjs.org/docs/lists-and-keys.html#keys" target="_blank" rel="noopener noreferrer">这里</a>所说的React的 “列表和key” 功能有关</p><p>你可以在<a href="https://github.com/facebook/react/blob/6e4f7c788603dac7fccd227a4852c110b072fe16/packages/react-reconciler/src/ReactFiber.js#L78" target="_blank" rel="noopener noreferrer">这里</a>找到 fiber节点的完整结构。 在上面的说明中，省略了很多字段。 </p><p>尤其是跳过了构成树结构的 <code>child</code> 指针， <code>sibling</code> 指针和 <code>return</code> 指针。</p><p>[这些结构我在 <a href="https://indepth.dev/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree/" target="_blank" rel="noopener noreferrer">上一篇文章 </a>中有所描述。 ]</p><p>以及专门针对 <code>Scheduler</code> 的 <code>expirationTime</code> ， <code>childExpirationTime</code> 和 <code>mode</code> 等字段类别。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="通用算法">通用算法<a href="#通用算法" class="hash-link" aria-label="通用算法的直接链接" title="通用算法的直接链接">​</a></h2><p>React 执行工作分为两个主要阶段：<strong>render</strong> 和 <strong>commit</strong>。</p><p>在 <code>render</code> 阶段，React 通过 <code>setState</code> 或 <code>React.render</code> 有计划的将更新应用于组件，并找出需要在 UI 中更新的内容。</p><p>如果是初始渲染，React 会为 <code>render</code> 方法返回的每个元素创建一个新的 fiber 节点。在后续更新中，现有 React 元素的 fiber 节点将被复用和更新。</p><p><strong>该阶段的执行的结果是带有 effect 的 fiber 节点树。</strong>effect 描述了在下一个 <code>commit</code> 阶段需要完成的工作。</p><p>当前阶段，React 会绘制一棵标记有 effect 的 fiber 树，并将其应用于实例。它遍历 effect 链表并执行 DOM 更新和用户可见的其他更改。</p><p><strong>理解 <code>render</code> 阶段的工作可以异步执行，对我们而言非常重要</strong>。React 可以根据可用时间来处理一个或多个 fiber 节点，然后中断并且暂存已完成的工作，转去处理某些事件，接着它再从它停止的地方继续执行。</p><p>但有时候，它可能需要丢弃完成的工作然后重新从头开始。</p><p>由于在此阶段执行的工作不会导致任何用户可见的更改（例如DOM更新），所以才可以实现这些暂停。</p><p>(译者注：因为 React 的一致性，所以不可能给用户呈现渲染到一半的组件，这样意味着这个阶段执行的所有 work 都是用户不可见的。)</p><p><strong>与之相反的是，后续的 <code>commit</code> 阶段始终是同步的</strong>。这是因为在此阶段执行的工作会导致用户可见的更改，例如 DOM 更新。这就是为什么 React 需要一次性完成这些操作。</p><p>调用生命周期方法是 React 的工作之一。一些方法是在 <code>render</code> 阶段调用的，而另一些方法则是在 <code>commit</code> 阶段调用。</p><p>这是在第一个 <code>render</code> 阶段工作时，调用的生命周期列表：</p><ul><li>[UNSAFE_]<!-- -->componentWillMount (deprecated)</li><li>[UNSAFE_]<!-- -->componentWillReceiveProps (deprecated)</li><li>getDerivedStateFromProps</li><li>shouldComponentUpdate</li><li>[UNSAFE_]<!-- -->componentWillUpdate (deprecated)</li><li>render</li></ul><p>如你所见，在16.3版本中，在 <code>render</code> 阶段执行的一些遗留的生命周期方法被标记为 <code>UNSAFE</code> 。</p><p>（译者注：这里的 “unsafe” 不是指安全性，而是表示使用这些生命周期的代码在 React 的未来版本中更有可能出现 bug，尤其是在启用异步渲染之后。参考<a href="https://zh-hans.reactjs.org/blog/2018/03/27/update-on-async-rendering.html" target="_blank" rel="noopener noreferrer">官方文档</a>）</p><p>现在在文档中它们被称为遗留 (legacy lifecycles) 生命周期。将在以后的 16.x 发行版中弃用，而没有 <code>UNSAFE</code> 前缀的对应版本将在 17.0版本中移除。 </p><p>你可以在<a href="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html" target="_blank" rel="noopener noreferrer">这里</a>详细的了解这些更改，以及建议的迁移路径。</p><p>你是否对此感到好奇？</p><p>好吧，我们刚刚了解到，由于 <code>render</code> 阶段不会产生诸如 DOM 更新之类的 effect，因此 React 可以异步处理组件的异步更新（甚至可能在多个线程中进行）。</p><p>但是，标有 <code>UNSAFE</code> 的生命周期经常被误解和巧妙地滥用。开发人员倾向于将带有 effect 的代码放在这些方法中，这可能会导致新的异步渲染方法出现问题。</p><p>Although only their counterparts without the <code>UNSAFE</code> prefix will be removed, they are still likely to cause issues in the upcoming Concurrent Mode (which you can opt out of).</p><p>(译者注：这一段并不是忘记翻译，我对作者描述的内容还有疑问，已经在沟通中，后续会同步到 frontendwingman 的章节中)</p><p>接下来罗列的生命周期方法是在第二个 <code>commit</code> 阶段执行的：</p><ul><li>getSnapshotBeforeUpdate</li><li>componentDidMount</li><li>componentDidUpdate</li><li>componentWillUnmount</li></ul><p>因为这些方法都在同步的 <code>commit</code> 阶段执行，他们可能会包含 side-effects ，并且操作DOM。</p><p>好的，现在我们拥有了背景之后，让我们继续深入研究，用于遍历树和执行 work 的通用算法 。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="render-阶段">Render 阶段<a href="#render-阶段" class="hash-link" aria-label="Render 阶段的直接链接" title="Render 阶段的直接链接">​</a></h3><p>协调算法始终使 <a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1132" target="_blank" rel="noopener noreferrer">renderRoot</a> 函数从最顶层的 <code>HostRoot</code> fiber 节点开始。 但是，React 会退出（跳过）已经处理的 fiber 节点，直到找到工作未完成的节点。</p><p>例如，如果你在组件树的深处调用 <code>setState</code> ，React将从顶部开始，但会快速跳过父级，直到它到达调用了 <code>setState</code> 方法的组件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="workloop-的主要步骤">WorkLoop 的主要步骤<a href="#workloop-的主要步骤" class="hash-link" aria-label="WorkLoop 的主要步骤的直接链接" title="WorkLoop 的主要步骤的直接链接">​</a></h3><p>所有的 fiber 节点都会在 <a href="https://github.com/facebook/react/blob/f765f022534958bcf49120bf23bc1aa665e8f651/packages/react-reconciler/src/ReactFiberScheduler.js#L1136" target="_blank" rel="noopener noreferrer">work loop</a>. 中进行处理。如下是该循环的同步部分的实现：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">workLoop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">isYieldy</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">isYieldy</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextUnitOfWork </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nextUnitOfWork </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">performUnitOfWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextUnitOfWork</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在上面的代码中， <code>nextUnitOfWork</code> 持有对 <code>workInProgress</code> 树中 fiber 节点的引用。</p><p>该节点需要完成一些工作。 当 React 遍历 Fibers 树时，它通过此变量来判断是否还有其他未完成的 fiber 节点。</p><p>处理完当前光纤后，该变量将包含对树中下一个光纤节点的引用或为“ null”。 在这种情况下，React退出工作循环并准备提交更改。</p><p>处理过当前 fiber 后，变量将持有树中下一个 fiber 节点的引用或 <code>null</code> 。在为 <code>null</code> 的情况下，React 退出工作循环并准备好提交更改。</p><p><strong>有四个主要函数用于遍历树并初始化或完成工作：</strong></p><ul><li><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L1056" target="_blank" rel="noopener noreferrer">performUnitOfWork</a></li><li><a href="https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberBeginWork.js#L1489" target="_blank" rel="noopener noreferrer">beginWork</a></li><li><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L879" target="_blank" rel="noopener noreferrer">completeUnitOfWork</a></li><li><a href="https://github.com/facebook/react/blob/cbbc2b6c4d0d8519145560bd8183ecde55168b12/packages/react-reconciler/src/ReactFiberCompleteWork.js#L532" target="_blank" rel="noopener noreferrer">completeWork</a></li></ul><p>为了演示他们的使用方法，请看以下遍历 fiber 树的动画。我演示中使用了这些函数的简化实现。</p><p>每个函数都需要对一个 fiber 节点进行处理，当 React 顺着树往下遍历时，当前活动的 fiber 节点发生了变化。</p><p>图中可以清楚地看到，算法是如何从一个分支转到另一个分支。</p><p>在回溯到父节点之前，它首先完成子节点的 work，。</p><p><img loading="lazy" src="https://wingman-1300536089.file.myqcloud.com/react_north/C00/fiber06.gif" alt="tmp2" class="img_ev3q"></p><blockquote><p>注意，垂直方向连线表示同级（sibling 兄弟节点），而弯曲的连接表示子级，例如 <code>b1</code> 没有孩子，而 <code>b2</code> 有一个孩子 <code>c1</code> 。</p><p>(译者注，图中的树结构，按照正常的从顶到根的顺序排列的话，应该是从左往右看)</p></blockquote><p><a href="https://vimeo.com/302222454" target="_blank" rel="noopener noreferrer">这里 </a>是视频的链接，你可以暂停播放并检查当前节点和函数状态。</p><p>从概念上讲，你可以将 “开始 (begin)” 视为 “进入 (stepping into)” 组件，而将“完成 (complete)” 视为 “离开 (stepping out)” 组件。</p><p>当我解释这些功能时，你也可以在 <a href="https://stackblitz.com/edit/js-ntqfil?file=index.js" target="_blank" rel="noopener noreferrer">这里</a> 体验示例和实现。</p><p>我们从 <code>performUnitOfWork</code> 和 <code>beginWork</code> 开始：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">performUnitOfWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">workInProgress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">beginWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">workInProgress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">completeUnitOfWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">workInProgress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">beginWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">workInProgress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'work performed for '</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> workInProgress</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> workInProgress</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">child</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>performUnitOfWork</code> 函数从 <code>workInProgress</code> 树接收一个 fiber 节点，并通过调用 <code>beginWork</code> 开始工作，此函数将启动 fiber 需要执行的所有活动。</p><p>出于演示的目的，我们只打印出 fiber 节点的名称表示 work 已经完成。</p><p><strong>函数 <code>beginWork</code> 总是返回指向在循环中处理的下一个 child 的指针，或返回 <code>null</code> </strong></p><p>如果下一个 child存在，它将被赋值给 <code>workLoop</code> 函数中的变量 <code>nextUnitOfWork</code> 。</p><p>然而，如果不存在，React 就知道自己到达了分支的末尾，因此它可以完成当前节点。</p><p><strong>一旦节点完成，它将需要为同层的其他节点( siblings )执行工作，并在完成后回溯到父节点。</strong>这些都在 <code>completeUnitOfWork</code> 函数中完成：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">completeUnitOfWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">workInProgress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> returnFiber </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> workInProgress</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> siblingFiber </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> workInProgress</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">sibling</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nextUnitOfWork </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">completeWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">workInProgress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">siblingFiber </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// If there is a sibling, return it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// to perform work for this sibling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> siblingFiber</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">returnFiber </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// If there's no more work in this returnFiber,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// continue the loop to complete the parent.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            workInProgress </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> returnFiber</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword control-flow" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// We've reached the root.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">completeWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">workInProgress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'work completed for '</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> workInProgress</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从实现中可以看出， <code>performUnitOfWork</code> 和 <code>completeUnitOfWork</code> 主要用于迭代目的，而主要活动则在 <code>beginWork</code> 和 <code>completeWork</code> 函数中进行。</p><p>该函数的核心是一个很大的 <code>while</code> 循环。</p><p>当一个 <code>workInProgress</code> 节点没有子节点时，React进入这个函数。完成当前 fiber 节点的工作后，它会检查是否存在同级。</p><p>如果找到，React 退出函数并返回指向同级的指针。返回的指针将被赋值给 <code>nextUnitOfWork</code> 变量，React将从同级节点开始为分支执行工作。</p><p>需要重点理解的是，React 目前仅完成了之前的同级节点 ( siblings ) 的工作。尚未完成父节点的工作。 </p><p><strong>只有子节点的所有分支都完成后，它才能完成父节点和回溯的工作。</strong></p><p>实现中还可以看到， <code>performUnitOfWork</code> 和 <code>completeUnitOfWork</code> 两者的主要目的都是迭代，而活动主要发生在 <code>beginWork </code> 和 <code>completeWork</code> 函数中。</p><p>在本系列的后续的文章中，我们将了解React进入 <code>beginWork</code> 和 <code>completeWork</code> 函数后， <code>ClickCounter</code> 组件和 <code>span</code> 节点会发生什么。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="commit-阶段">Commit 阶段<a href="#commit-阶段" class="hash-link" aria-label="Commit 阶段的直接链接" title="Commit 阶段的直接链接">​</a></h2><p>这一阶段从函数 <a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L2306" target="_blank" rel="noopener noreferrer">completeRoot</a> 开始。这也是 React 更新 DOM 并调用预更新 (pre-mutation) / 更新生命周期方法的地方。</p><p>当 React 进入这一阶段时，它有 2 棵树和 effect 链表。 第一棵树表现当前在屏幕上呈现的状态。 </p><p>然后在 <code>render</code> 阶段构建另一棵备用树。</p><p>它在源代码中称为 <code>finishedWork </code> 或 <code>workInProgress</code> ，表示将要映射到屏幕上的状态。</p><p>此备用树会用类似的方法通过 <code>child</code> 和 <code>sibling</code> 指针链接到 current 树。</p><p>然后，有一个 effect 链表（它是 <code>finishedWork</code> 树的节点子集），通过 <code>nextEffect</code> 指针进行链接。</p><p>需要记住的是，effect 链表是 <code>render</code> 阶段运行的<strong>结果</strong>。</p><p>render 的最终目的就是确定那些需要插入、更新或删除的节点，以及哪些组件需要调用其生命周期方法。</p><p>这正是 effect 链表要告诉我们的，<strong>而且它就是在 commit 阶段迭代的节点集。</strong></p><blockquote><p>为了调试，可以通过 fiber root 的 <code>current</code> 属性访问 <code>current</code> 树。 可以通过current 树中的 <code>HostFiber</code> 节点的 <code>alternate</code> 属性来访问 <code>finishedWork</code> 树。</p></blockquote><p>在 <code>commit</code> 阶段运行的主要函数是<a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L523" target="_blank" rel="noopener noreferrer">commitRoot</a>。基本上，它执行以下操作：</p><ul><li>在标记 <code>Snapshot</code> effect 的节点调用 <code>getSnapshotBeforeUpdate </code> 生命周期。</li><li>在标记 <code>Deletion</code> effect 的节点调用 <code>componentWillUnmount</code> 生命周期。</li><li>执行 <code>DOM</code> 的所有插入、更新、删除操作。</li><li>将 <code>finishedWork</code> 树设置为 <code>current</code> 。</li><li>在标记 <code>Placement</code> effect 的节点调用 <code>componentDidMount </code> 生命周期。</li><li>在标记 <code>Update</code> effect 的节点调用 <code>componentDidUpdate </code> 生命周期。</li></ul><p>在调用预更新 (pre-mutation) 方法 <code>getSnapshotBeforeUpdate</code> 之后，React 提交了树中的所有 side-effect。</p><p>分两步走：</p><p>第一步，执行所有 DOM（宿主）的插入、更新、删除和 ref 卸载。</p><p>然后 React 将 <code>finishedWork</code> 树赋值给 <code>FiberRoot</code> 。</p><p>将 <code>workInProgress </code> 树标记为 <code>current</code> 树。</p><p>这些在 commit 阶段的第一波之后完成。</p><p>所以在 <code> componentWillUnmount</code> 期间前一棵树仍然是 current 树。</p><p>但这些都发生在第二步之前，所以在 <code>componentDidMount/Update</code> 期间 finished work 是 <code>current</code> 。</p><p>第二步，React 调用所有其他生命周期方法和 ref 回调。这些方法作为一个单独的过程，使整个树中的所有插入，更新和删除操作均被执行。</p><p>这是运行上述步骤的函数的要点：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">commitRoot</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">root</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> finishedWork</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">commitBeforeMutationLifecycles</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">commitAllHostEffects</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">current</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> finishedWork</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">commitAllLifeCycles</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这些子函数中的每一个都实现了一个循环，该循环遍历 effect 链表 并检查 effect 类型。 当发现与函数目的有关的 effect 时，就会执行。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="预更新生命周期方法-pre-mutation-lifecycle-methods">预更新生命周期方法 Pre-mutation lifecycle methods<a href="#预更新生命周期方法-pre-mutation-lifecycle-methods" class="hash-link" aria-label="预更新生命周期方法 Pre-mutation lifecycle methods的直接链接" title="预更新生命周期方法 Pre-mutation lifecycle methods的直接链接">​</a></h3><p>例如，下面是在 effect 树上迭代并检查节点是否具有 Snapshot effect 的代码：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">commitBeforeMutationLifecycles</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextEffect </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> effectTag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextEffect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">effectTag</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">effectTag </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token maybe-class-name">Snapshot</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextEffect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">alternate</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">commitBeforeMutationLifeCycles</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nextEffect</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nextEffect </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextEffect</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">nextEffect</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对于类组件，这个 effect 意味着调用 <code>getSnapshotBeforeUpdate</code> 生命周期方法。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dom-更新">DOM 更新<a href="#dom-更新" class="hash-link" aria-label="DOM 更新的直接链接" title="DOM 更新的直接链接">​</a></h3><p><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L376" target="_blank" rel="noopener noreferrer">commitAllHostEffects</a> 是 React 执行 DOM 更新的函数。该函数基本上定义了节点需要完成的操作类型，并执行这些操作：</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">commitAllHostEffects</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">primaryEffectTag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">Placement</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">commitPlacement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextEffect</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">PlacementAndUpdate</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">commitPlacement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextEffect</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">commitWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nextEffect</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">Update</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">commitWork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nextEffect</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">Deletion</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">commitDeletion</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nextEffect</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>有意思的是，React 调用 <code>componentWillUnmount</code> 方法作为 <code>commitDeletion</code> 函数删除过程中的一部分。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="更新后的生命周期方法-post-mutation-lifecycle-methods">更新后的生命周期方法 Post-mutation lifecycle methods<a href="#更新后的生命周期方法-post-mutation-lifecycle-methods" class="hash-link" aria-label="更新后的生命周期方法 Post-mutation lifecycle methods的直接链接" title="更新后的生命周期方法 Post-mutation lifecycle methods的直接链接">​</a></h3><p><a href="https://github.com/facebook/react/blob/95a313ec0b957f71798a69d8e83408f40e76765b/packages/react-reconciler/src/ReactFiberScheduler.js#L465" target="_blank" rel="noopener noreferrer">commitAllLifecycles</a> 是 React 调用余下所有生命周期方法 <code>componentDidUpdate</code> 和 <code>componentDidMount</code> 的函数。</p><hr><p>终于完成了。 让我知道你对本文的看法或在评论中提出问题。 <strong>查看该系列的下一篇文章 <!-- -->[React中 state 和 props 更新的深入说明]<!-- -->（<a href="https://indepth.dev/in-depth-explanation-of-state-and-props-update-in-react/)%E3%80%82" target="_blank" rel="noopener noreferrer">https://indepth.dev/in-depth-explanation-of-state-and-props-update-in-react/)。</a></strong></p><p>我还有更多文章，为调度程序，children 协调过程以及 effect 链表 的构建方式提供了深入的解释。 还计划做个视频，展示如何以本文为基础调试应用程序。</p>]]></content>
        <author>
            <name>Max Koretskyi</name>
            <uri>https://github.com/maxkoretskyi</uri>
        </author>
    </entry>
</feed>